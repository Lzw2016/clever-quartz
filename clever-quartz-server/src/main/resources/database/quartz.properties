# suppress inspection "UnusedProperty" for whole file
#============================================================================
# Configure Main Scheduler Properties
#============================================================================
#每个 Scheduler 必须给定一个名称来标识。当在同一个程序中有多个实例时，这个名称作为客户代码识别是哪个Scheduler而用
#假如你用到了集群特性，你就必须为集群中的每一个实例使用相同的名称，以使它们成为“逻辑上”是同一个Scheduler
org.quartz.scheduler.instanceName=QuartzSchedulerCluster
#每个Quartz Scheduler必须指定一个唯一的 ID。这个值可以是任何字符串值，只要对于所有的Scheduler是唯一的。
#如果你想要自动生成的ID，那你可以使用AUTO作为instanceId
#从版本 1.5.1 开始，你能够定制如何自动生成实例ID。见instanceIDGenerator.class属性
org.quartz.scheduler.instanceId=AUTO
#从版本 1.5.1 开始，这个属性允许你定制instanceId的生成，这个属性仅被用于属性org.quartz.scheduler.instanceId设置为AUTO的情况下。
#默认是org.quartz.simpl.SimpleInstanceIdGenerator，它会基于主机名和时间戳来产生实例ID的。
org.quartz.scheduler.instanceIdGenerator.class=org.quartz.simpl.SimpleInstanceIdGenerator
#可以是对于Java线程来说有效名称的任何字符串
#假如这个属性未予指定，线程将会接受Scheduler名称(org.quartz.scheduler.instanceName)前附加上字符串'_QuartzSchedulerThread'作为名称
org.quartz.scheduler.threadName=QuartzSchedulerThread
#指定调度的主线程是否应该是一个守护线程或没有。也看到了调整SimpleThreadPool的org.quartz.scheduler.makeSchedulerThreadDaemon财产，如果这是你正在使用的线程池实现（这是最有可能的情况下）。
org.quartz.scheduler.makeSchedulerThreadDaemon=false
org.quartz.scheduler.threadsInheritContextClassLoaderOfInitializer=false
#这个属性设置了当Scheduler处于空闲时转而再次查询可用Trigger时所等待的毫秒数
#通常，你无需调整这个参数，除非你正使用XA事物，遇到了Trigger本该立即触发而发生延迟的问题
org.quartz.scheduler.idleWaitTime=30000
#这个属性设置Scheduler在检测到JobStore到某处的连接(比如到数据库的连接)断开后，再次尝试连接所等待的毫秒数
#这个参数在使用RamJobStore无效
org.quartz.scheduler.dbFailureRetryInterval=15000
#默认值为org.quartz.simpl.CascadingClassLoadHelper类(已经够用了不需要修改)，它会依序使用其他的ClassLoadHelper类，直到有一个能正常工作为止
#你大概没必须为这个属性指定任何其他的类，除非有可能在应用服务器中时。所有ClassLoadHelper的实现可在org.quartz.simpl包中找到
org.quartz.scheduler.classLoadHelper.class=org.quartz.simpl.CascadingClassLoadHelper
#默认为org.quartz.simpl.SimpleJobFactory
#你也可以试试 org.quartz.simpl.PropertySettingJobFactory
#一个Job工厂负责产生Job类的实例
#SimpleFactory类是调用Job类的newInstance()方法
#PropertySettingJobFactory也会调用newInstance()，但还会使用JobDataMap中的内容以反射方式设置Job Bean的属性
org.quartz.scheduler.jobFactory.class=org.quartz.simpl.PropertySettingJobFactory
#这个属性用于向"SchedulerContext"中置入一个 名-值 对表示的字符串值(见 Scheduler.getContext())
#因此，比如设置了org.quartz.context.key.MyEmail=myemail@somehost.com就相当于执行了scheduler.getContext().put("MyEmail", myemail@somehost.com)
#org.quartz.context.key.SOME_KEY=
#它设置了Quartz能在哪里定位到应用服务器的UserTransaction管理器的JNDI URL
#默认值(未设定的话)是java:comp/UserTransaction，这几乎能工作于所有的应用服务器中
#Websphere用户也许需要设置这个属性为 jta/usertransaction
#这个属性仅用于Quartz配置使用JobStoreCMT的情况，并且org.quartz.scheduler.wrapJobExecutionInUserTransaction被设定成了true
org.quartz.scheduler.userTransactionURL=java:comp/UserTransaction
#如果你要Quartz在调用你的Job的execute之前启动一个UserTransaction的话
#设置这个属性为true，这个事物将在Job的execute方法完成和JobDataMap(假如是一个 StatefulJob)更新后提交
org.quartz.scheduler.wrapJobExecutionInUserTransaction=false
#Quartz更新检查，生产环境应该禁用(true)，默认值false
org.quartz.scheduler.skipUpdateCheck=false
#一个调度节点被允许在一次获得触发器的最大数目(默认值是1)
#只设置得越大同时执行的任务数量就越多
#如果该属性的值被设置为>1，并用于JDBC作业存储，则属性“org.quartz.jobStore.acquireTriggersWithinLock”必须设置为“真”，以避免数据损坏
org.quartz.scheduler.batchTriggerAcquisitionMaxCount=1
#设置触发器在触发之前就能被获取到的时间(单位毫秒)
#默认为0，数字越大，越有可能批量触发定时任务，与属性“org.quartz.scheduler.batchTriggerAcquisitionMaxCount”配合使用
org.quartz.scheduler.batchTriggerAcquisitionFireAheadTimeWindow=0
#============================================================================
# Configure ThreadPool
#============================================================================
#用于指定你想要使用的ThreadPool实现的类名。Quartz自带的ThreadPool实现是org.quartz.simpl.SimpleThreadPool，它在大多数情况下是够用的
#它有着十分简单的行为并得到过很好的测试。它提供了一个固定大小的线程池，且线程在Scheduler的生命期内是"活着"的
org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool
#这个属性指定了可用于并发执行Job的线程的数量。它可设置为一个1和100之间的正整数。大于100的值也是允许的但却不切实际
#假如你一天中只有少数几个Job要触发，那一个线程就够了
#如果你有数以万计的 Job，且每分钟有许多被触发，那么你或许要的线程数就会是50或者100
org.quartz.threadPool.threadCount=25
#这个属性用于指定工作者线程运行的优先级。这个值可是介于1和10之间的整数。默认为5，也就是 Thread.NORM_PRIORITY
org.quartz.threadPool.threadPriority=5
#============================================================================
# Configure Global Listeners
#============================================================================
############ TriggerListener -- 触发器全局监听器
#可以是你想要提供给监听器的任何名称，但它应当与调用这个类的getName()的返回值相匹配。你能提供属性给监听器，它们会以反射方式设置给监听器的
#org.quartz.triggerListener.NAME.class = com.foo.MyListenerClass
#org.quartz.triggerListener.NAME.propName = propValue
#org.quartz.triggerListener.NAME.prop2Name = prop2Value
############ JobListener -- Job全局监听器
#可以是你想要提供给监听器的任何名称，但它应当与调用这个类的getName()的返回值相匹配。你能提供属性给监听器，它们会以反射方式设置给监听器的
#org.quartz..NAME.class = com.foo.MyListenerClass
#org.quartz.jobListener.NAME.propName = propValue
#org.quartz.jobListener.NAME.prop2Name = prop2Value
#============================================================================
# Configure Scheduler Plugins
#============================================================================
#org.quartz.plugin.NAME.class = com.foo.MyPluginClass
#org.quartz.plugin.NAME.propName = propValue
#org.quartz.plugin.NAME.prop2Name = prop2Value
#设置参数时的NAME必须与指派给插件的NAME相匹配
#Quartz JVM关闭监听插件,当JVM关闭时关闭Quartz调度
org.quartz.plugin.ShutdownHookPlugin.class=org.quartz.plugins.management.ShutdownHookPlugin
#Job执行日志插件
org.quartz.plugin.JobLogPlugin.class=org.clever.quartz.plugins.JobLogPlugin
#Trigger触发日志插件
org.quartz.plugin.TriggerLogPlugin.class=org.clever.quartz.plugins.TriggerLogPlugin
#Scheduler调度日志插件
org.quartz.plugin.SchedulerLogPlugin.class=org.clever.quartz.plugins.SchedulerLogPlugin
#============================================================================
# Configure RMI Settings
#============================================================================
#假如你想要Quartz Scheduler经由RMI服务器被导出，就设置此项为true
org.quartz.scheduler.rmi.export=false
#配置在哪个主机上能找到RMI服务。默认为localhost
#org.quartz.scheduler.rmi.registryHost=localhost
#这个配置RMI注册表所监听的端口。默认为1099
#org.quartz.scheduler.rmi.registryPort=11099
#要根据你想要Quartz如何创建一个RMI注册服务来设置该属性。
#假如你不希望Quartz创建一个注册服务(例如，如果你已经有一个在运行的外部注册服务)就使用false或者 never
#要是你想要Quartz首先尝试去使用一个已存在的注册服务，失败时才创建时就用true或者as_needed
#倘若你要Quartz先尝试创建一个注册服务，不成功就使用一个已存在的注册服务的话就用always
#一旦注册服务创建好了，它将会被绑定到org.quartz.scheduler.rmi.registryPort属性指指定的端口上去，而此时org.quartz.schedu.rmi.registryHost应该是localhost
#org.quartz.scheduler.rmi.createRegistry=never
#这个指示了Quartz Scheduler服务将被绑定和监听连接的端口号。默认时，RMI 服务会随机选择一个端口号用来把Scheduler绑定到 RMI注册服务
#org.quartz.scheduler.rmi.serverPort=random
#如果你要连接到一个远程的Scheduler服务就设置本属性为true。同时你必须指定RMI注册进程的主机和端口号，通常是localhost和1099端口
#不要在同一个配置文件中指定org.quartz.scheduler.rmi.export和org.quartz.scheduler.rmi.proxy都为true；假如你那样做的话，export选项将会忽略
#如果你不打算通过RMI 来使用Quartz的话，export和proxy属性同时设为false当然没问题了
#org.quartz.scheduler.rmi.proxy=false
#============================================================================
# Configure JobStore
#============================================================================
############ Configure JDBC-JobStoreTX(JDBC)
#使用数据库存储(JDBC方式)
org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
#Quartz通过一个代理可以使用大部分流行的数据库平台
org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#配置中定义的DataSource的名称
#org.quartz.jobStore.dataSource=
#表前缀属性是作为在你的数据库中创建Quartz表的表名的前缀。如果你使用不同的表前缀，你就能够在同一个数据库中拥有多套Quartz表
org.quartz.jobStore.tablePrefix=QRTZ_
#"使用属性" 设置指示着JDBC JobStore所有在 JobDataMap 中的值会是字符串
#因此，它们可以名-值对来存储，而无需把更复杂的对象以序列化的形式存储在BLOB列中
#这样做很有好处的，因为避免了伴随着序列化非字符串类到BLOB时产生的类版本问题
org.quartz.jobStore.useProperties=false
#Scheduler 允许一个 Trigger 在超过它的下次触发时多少毫秒才算是错过触发。默认值是 60000 (60 秒)。
org.quartz.jobStore.misfireThreshold=60000
#设置为 true 来打开集群特性。假如你正使用多个 Quartz 实例且用的是同一套数据库表的话，这个属性必须设置为 true
org.quartz.jobStore.isClustered=true
#设置当前实例检查集群中的其他实例的频度 (毫秒)。这个值会影响侦测失败实例的灵敏性
org.quartz.jobStore.clusterCheckinInterval=15000
#这是设定 JobStore 同一时刻能处理错过触发 Trigger 的最大数量
#一次同时处理太多(超过数十个)的话，会导致数据库表被锁定过长的时间，从而影响到了触发其他的(还未错过触发) Trigger 的性能
org.quartz.jobStore.maxMisfiresToHandleAtATime=20
#设置这一参数为 true 是告诉 Quartz 别调用从 DataSource 处获取的连接的 setAutoCommit(false) 方法
#这在一些情况下是有帮助的，比如可能你有某个驱动在连接关闭的时候是不允许调用该方法的
#这个属性默认为 false，因为多数驱动是需要调用 setAutoCommit(false) 方法的
org.quartz.jobStore.dontSetAutoCommitFalse=false
#这必须为一个 SQL 字符串，用来从 LOCKS 表中查询一条记录并在其中加锁
#倘若未予设置，默认为 SELECT * FROM {0}LOCKS WHERE LOCK_NAME = ? FOR UPDATE, 这可在多数数据库中正常工作
#{0} 会在运行时替代为你早先配置的 TABLE_PREFIX 属性
org.quartz.jobStore.selectWithLockSQL=SELECT * FROM {0}LOCKS WHERE SCHED_NAME = {1} AND LOCK_NAME = ? FOR UPDATE
#值为 true 是告诉 Quartz (当使用 JobStoreTX 或是 CMT 的时候) 去调用 JDBC 连接的 setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE) 方法。
#这对于避免某些数据库在高负载及长事物发生时的锁超时是有帮助的
org.quartz.jobStore.txIsolationLevelSerializable=false
#防止数据库死锁的配置
org.quartz.jobStore.acquireTriggersWithinLock=false
#============================================================================
# Configure DataSources
#============================================================================
#defined in spring-context-quartz.xml
